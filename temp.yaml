Description: 'Live Streaming Subtitling with AWS Transcribe'


Parameters:

  InputType:
    Description: Specify the input type for MediaLive (default parameters are for the demo video)
    Type: String
    Default: URL_PULL
    AllowedValues:
      - RTP_PUSH
      - RTMP_PUSH
      - RTMP_PULL
      - URL_PULL
      - MEDIACONNECT

  InputCodec:
    Description: Specify the codec of the source stream for MediaLive (AVC/HEVC/MPEG2)
    Type: String
    Default: AVC
    AllowedValues:
      - AVC
      - HEVC
      - MPEG2

  InputRes:
    Description: Specify the Encoding Profile to use for MediaLive
    Type: String
    Default: 1080
    AllowedValues:
      - 1080

  InputCIDR:
    Description: For RTP and RTMP PUSH input types ONLY, specify the CIDR Block for the MediaLive SecurityGroup. Input security group restricts access to the input and prevents unauthorized third parties from pushing content into a channel that is associated with that input.
    Type: String
    Default: ""

  PriPullURL:
    Description: Specify the primary source URL for the PULL input stream
    Type: String
    Default: "https://d15an60oaeed9r.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"

  PriPullUser:
    Description: For URL PULL input type ONLY, if basic authentication is enabled on the source stream enter the username
    Type: String
    Default: ""

  PriPullPass:
    Description: For URL PULL input type ONLY, if basic authentication is enabled on the source stream enter the password
    Type: String
    Default: ""

  PriMediaConnectArn:
    Description: Specify the Arn for MediaConnect as a source
    Type: String
    Default: ""

  ChannelStart:
    Description: If your source is ready to stream select true, this will start the MediaLive Channel as part of the deployment. If you select false you will need to manually start the MediaLive Channel when your source is ready.
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No
  
  TranscribeLanguage:
    Description: If selecting a language other than English en-US modify the AWS Medialive channel first output caption Name Modifier from _en to the language you choose here. (Example _es for es-US Spanish) 
    Type: String
    Default: en-US
    AllowedValues:
      - en-US
      - es-US
      - de-DE
      - ja-JP
      - pt-BR
      - it-IT

  CustomVocabulary:
    Description: Custom Vocabulary for Amazon Transcribe. Make sure to make your Custom Vocabulary in the same region you deploy.
    Type: String
    Default: ""

  VocabularyFilter:
    Description: Name of your Vocabulary Filter for Amazon Transcribe. Use a vocabulary filter to filter unwanted words in real-time streams.
    Type: String
    Default: ""

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
              Label:
                default: Deployment Options
              Parameters:
                - Code
            -
              Label:
                default: LIVE STREAM SOURCE
              Parameters:
                - InputType
            -
              Label:
                default: URL_PULL CONFIGURATION
              Parameters:
                - PriPullURL
                - PriPullUser
                - PriPullPass
            -
              Label:
                default: RTP_PUSH / RTMP_PUSH CONFIGURATION
              Parameters:
                - InputCIDR
            -
              Label:
                default: MEDIACONNECT SOURCE TYPE
              Parameters:
                - PriMediaConnectArn
            -
              Label:
                default: SUBTITLES CONFIG USING AMAZON TRANSCRIBE
              Parameters:
                - TranscribeLanguage
                - CustomVocabulary
                - VocabularyFilter
            -
              Label:
                default: ENCODING OPTIONS
              Parameters:
                - InputCodec
                - InputRes
                - ChannelStart

        ParameterLabels:
          InputType:
            default: Source Input Type
          InputCodec:
            default: Source Codec
          InputRes:
            default: Encoding Profile
          InputCIDR:
            default: Input Security Group CIDR Block (REQUIRED)
          PriPullURL:
            default: Source URL (REQUIRED)
          PriPullUser:
            default: Source Username (OPTIONAL)
          PriPullPass:
            default: Source Password (OPTIONAL)
          Code:
            default: Source Code
          PriMediaConnectArn:
            default: MediaConnect Arn (OPTIONAL) 
          ChannelStart:
            default: Start MediaLive Channel
          TranscribeLanguage: 
            default: Input audio language of your video stream for Amazon Transcribe Streaming.  
          CustomVocabulary:
            default: Custom Vocabulary for Amazon Transcribe (Optional)
          VocabularyFilter:
            default: Vocabulary Filter name for Amazon Transcribe (Optional)


Conditions:
    Metrics: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], Yes]
    Start: !Equals [ !Ref ChannelStart , Yes ]


Mappings: 
  EcsAmiList: 
    us-east-2:
      ami: ami-0583ca2f3ce809fcb
    us-east-1:
      ami: ami-0128839b21d19300e
    us-west-1:
      ami: ami-0ac6a4a6e7e0949c4
    us-west-2:
      ami: ami-030c9d6616d98227e
    ap-northeast-1:
      ami: ami-08c834e58473d808d
    ap-northeast-2:
      ami: ami-0c0c0b030baf86093
    ap-south-1:
      ami: ami-01ab67467126a45fb
    ap-southeast-1:
      ami: ami-0791c84a135845cef
    ap-southeast-2:
      ami: ami-0579b3efbc3a6c3e2
    ca-central-1:
      ami: ami-0d0785328bd0eb34a
    eu-central-1:
      ami: ami-039bcbdcc961c4e81
    eu-north-1:
      ami: ami-0b9b6326bd1e30ce4
    eu-west-1:
      ami: ami-0383e6ac19943cf6a
    eu-west-2:
      ami: ami-0491c71e39d336e96
    eu-west-3:
      ami: ami-06068eac7923b976b
    sa-east-1:
      ami: ami-0a339e14c13e704df

  # AnonymousData:
    SendAnonymousData:
      Data: Yes
  
  # SourceCode:
    General:
      S3Bucket: "solutions"
      KeyPrefix: AWS-Transcribe-for-live-streaming


Resources:
  MediaLiveInput:
    Type: Custom::MediaLiveInput
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveInput
      StreamName: !Sub ${AWS::StackName}-livestream
      Type: !Ref InputType
      Cidr: !Ref InputCIDR
      PriUrl: !Ref PriPullURL
      PriUser: !Ref PriPullUser
      PriPass: !Ref PriPullPass
      PriMediaConnectArn: !Ref PriMediaConnectArn

  MediaLiveChannel:
    DependsOn: MediaLiveInput
    Type: Custom::MediaLiveChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannel
      Name: !Sub ${AWS::StackName}-livestream
      Resolution: !Ref InputRes
      Codec: !Ref InputCodec
      Role: !GetAtt MediaLiveRole.Arn
      InputId: !GetAtt MediaLiveInput.Id
      Type: !Ref InputType
      UDPAudioPriUrl: !Sub "udp://${ElasticLoadBalancerPipe0.DNSName}:7950"

  MediaLiveChannelStart:
    DependsOn: MediaLiveChannel
    Condition: Start
    Type: Custom::MediaLiveChannelStart
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannelStart
      ChannelId: !GetAtt MediaLiveChannel.ChannelId

  MediaLiveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "medialive.amazonaws.com"
            Action:
              - sts:AssumeRole

  MediaLiveRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref MediaLiveRole
      PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:PutParameter
            Resource:
              - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
          # feature/P20903447 MediaConnect support
          - Effect: Allow
            Action:
              - mediaconnect:ManagedDescribeFlow
              - mediaconnect:ManagedAddOutput
              - mediaconnect:ManagedRemoveOutput
            Resource:
              - !Join ["", ["arn:aws:mediaconnect:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]


  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-custom-resource"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              - Effect: Allow
                Action:
                  - medialive:createInputSecurityGroup
                  - medialive:describeInput
                  - medialive:createInput
                  - medialive:deleteInput
                  - medialive:stopChannel
                  - medialive:createChannel
                  - medialive:deleteChannel
                  - medialive:deleteInputSecurityGroup
                  - medialive:describeChannel
                  - medialive:startChannel
                  - medialive:createTags 
                  - medialive:deleteTags
                Resource:
                    - !Join ["", ["arn:aws:medialive:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  -  !GetAtt MediaLiveRole.Arn

  CustomResource:
    Type: AWS::Lambda::Function
    # DeletionPolicy: Retain
    Properties:
      FunctionName: !Sub ${AWS::StackName}-livestream-custom-resources
      Description: Used to deploy custom resources and send AnonymousData
      Handler: lambda.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  "custom-resource-py.zip"]]
      Runtime:  python3.9
      Timeout: 180


  ################################################
  # Resources needed for Transcriber ECS Instance Pipe0 
  ################################################
  TranscriberECSClusterPipe0:
    Type: AWS::ECS::Cluster

  TranscriberECSServicePipe0:
    DependsOn: 
      - ElasticLoadBalancerUDPListenerPipe0
      - ElasticLoadBalancerTargetGroupPipe0
      - EcsInstanceAutoScalingGroupPipe0
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref TranscriberECSClusterPipe0
      ServiceName: !Sub '${AWS::StackName}-TranscriberServicePipe0'
      LaunchType: EC2
      DesiredCount: 1
      Role: !Ref TranscriberECSServiceEC2Role
      HealthCheckGracePeriodSeconds: 2147483647
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      TaskDefinition: !Ref TranscriberECSTaskDefinitionPipe0
      LoadBalancers:
        - ContainerName: !Sub '${AWS::StackName}-Container'
          ContainerPort: 7950
          TargetGroupArn: !Ref ElasticLoadBalancerTargetGroupPipe0


  TranscriberECSTaskDefinitionPipe0:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      Family: !Sub '${AWS::StackName}-TaskDefinition'
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-Container'
          Cpu: 256
          Memory: 512
          Image: 'awsmediatools/livetranscribe:v1.1'
          Environment:
            - Name: REGION
              Value: !Ref 'AWS::Region'
            - Name: LANGUAGE_CODE
              Value: !Ref TranscribeLanguage
            - Name: LOGLEVEL
              Value: 'warning'
            - Name: VERBOSE
              Value: 'error'
            - Name: SOURCE
              Value: 'udp://127.0.0.1:7950'

          PortMappings:
              # Port used for UDP audio.
            - ContainerPort: 7950
              HostPort: 7950
              Protocol: udp
              # For health checks from ELB
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupPipe0
              awslogs-stream-prefix: ecs
              
                  
  LogGroupPipe0:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref 'AWS::StackName', TranscriberECSTaskDefinitionPipe0]]

  ############################################
  # Auto Scaling group for ECS Instance
  ############################################

  EcsInstanceAutoScalingLaunchConfigurationPipe0:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [EcsAmiList, !Ref "AWS::Region", ami]
      InstanceType: t2.small
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EcsInstanceProfile
      SecurityGroups: 
        - !Ref ContainerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdcz
        Ebs:
         VolumeSize: 22
         VolumeType: gp2
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            mkdir -p /etc/ecs
            echo ECS_CLUSTER=${TranscriberECSClusterPipe0} >> /etc/ecs/ecs.config


  EcsInstanceAutoScalingGroupPipe0:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref SubnetA
      LaunchConfigurationName: !Ref EcsInstanceAutoScalingLaunchConfigurationPipe0
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        -
          Key: Name
          Value: !Sub "ECS Instance - ${AWS::StackName}"
          PropagateAtLaunch: 'true'
        -
          Key: Description
          Value: "This instance is the part of the Auto Scaling group which was created through ECS"
          PropagateAtLaunch: 'true'

  ############################################
  # Load Balancer NBL Setup for ECS Instance
  ############################################

  ElasticLoadBalancerPipe0:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W52
              reason: "ElasticLoadBalancingV2 does not have a logging option in CloudFormation."
      Properties:
        Type: network
        Scheme: internet-facing
        IpAddressType: ipv4
        Subnets:
          - !Ref SubnetA


  ElasticLoadBalancerUDPListenerPipe0:
   DependsOn: ElasticLoadBalancerTargetGroupPipe0
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
       - Type: forward
         TargetGroupArn: !Ref ElasticLoadBalancerTargetGroupPipe0
     LoadBalancerArn: !Ref ElasticLoadBalancerPipe0
     Port: 7950
     Protocol: UDP

  # Target Group for the load balancer
  ElasticLoadBalancerTargetGroupPipe0:
    DependsOn: ElasticLoadBalancerPipe0
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Protocol: UDP
      Port: 7950
      HealthCheckEnabled: true
      HealthCheckPort: 8080
      HealthCheckProtocol: TCP
      VpcId: !Ref VPC

  ################################################
  # End of ECS Container setup and Elastic Load Balancer Setup
  ################################################

  # Allows the ECS service to spin up EC2 instances.
  TranscriberECSServiceEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'

  ############################################
  # VPC needed to create and run the ECS Transcriber Instance
  ############################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "VPC should have a flow log attached."

  # VPC Flow Logging
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      LogGroupName: FlowLogsGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  #VPC Flow Logging role https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-cwl.html
  VPCFlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "vpc-flow-logs.amazonaws.com"
          Action: "sts:AssumeRole"

  VPCFlowLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-VPCFlowLogRole-policy
      Roles:
        - !Ref VPCFlowLogRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource:
              !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/25
      AvailabilityZone: !Select [ 0 , !GetAZs ]   # Get the first AZ in the list

  # Setup networking resources for the public subnets. Containers
  # The public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable

  # Here is the EC2 Autoscaling Configuration for ECS using EC2.
  # Networking and security groups for the ECS Instance. 
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}
      VpcId: !Ref VPC
      SecurityGroupIngress:
          # 7950 UDP is for the audio input.
          # MediaLive Channel A 
        - IpProtocol: udp
          FromPort: 7950
          ToPort: 7950
          CidrIp: !Sub ${MediaLiveChannel.EgressIpPipe0}/32
          # 8080 TCP is for health checking for the NLB
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Sub ${MediaLiveChannel.EgressIpPipe0}/32

      # This was added by SolutionBuilder CFN NAGs
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "Using open eggress so that AWS Transcribe Streaming has eggress access"
          - id: W29
            reason: "Using open eggress so that AWS Transcribe Streaming has eggress access"
          - id: W36
            reason: "Security group rules without a description obscure their purpose and may lead to bad practices in ensuring they only allow traffic from the ports and sources/destinations required."


  ############################################
  # Roles needed to create and run the ECS Transcriber Instance
  ############################################

  EcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "ec2.amazonaws.com"
          Action: "sts:AssumeRole"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EcsInstanceRole

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-TaskDefinitionExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "This role can be shared between different deployments."

# Permissions for the ECS container.
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-TaskDefinitionTaskRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "This role can be shared between different two deployments."

# AWS Transcribe Task Policy 
  TranscribePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-dynamodb-policy
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - transcribe:GetTranscriptionJob
              - transcribe:GetVocabulary
              - transcribe:ListVocabularies
              - transcribe:StartStreamTranscription
              - transcribe:StartStreamTranscriptionWebSocket
              - transcribe:StartTranscriptionJob
            Resource: "*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "Amazon Transcribe does not support specifying a resource ARN. That is why * is used. https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazontranscribe.html"


# Outputs:
  MediaLivePrimaryEndpoint:
    Description: Primary MediaLive input Url
    Value: !GetAtt MediaLiveInput.EndPoint1